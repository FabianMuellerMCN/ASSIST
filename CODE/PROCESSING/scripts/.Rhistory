mutate(Condition=factor(Condition,c('Treatment group',"Control group")))
JITTER_WIDTH=0.1
COLOR_PALETTE=c('#474747','#a6a6a6')
fear_plot <-   summary %>%
ggplot(aes(x=Intervention_Phase,
y=mean,
group=Condition,
color=Condition))+
geom_point(size=2,
position=position_dodge(width=JITTER_WIDTH))+
geom_line(aes(linetype=Condition),
position=position_dodge(width=JITTER_WIDTH),
size=0.5)+
geom_errorbar(aes(ymin=mean-se, # REPLACE WITH STANDARD ERROR
ymax=mean+se, # REPLACE WITH STANDARD ERROR
linetype=Condition),
size=0.5,
width=0.1,
position=position_dodge(width=JITTER_WIDTH))+
theme_tufte()+
theme(axis.line = element_line(size = .5, color = "#444444"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
text=element_text(size = 18),
plot.title = element_text(size =18,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(t = 0, r = 20, b = 0, l = 0)))+
ylab('Fear')+
xlab('')+
scale_color_manual(values = COLOR_PALETTE)+
scale_y_continuous(limits = c(0,100)) +
annotate(geom = "text",
label = '***',
x = 2.945,
y=74,
size=6,
hjust=-0.005)
fear_plot
# Output
tiff('fear_plot', units="in", width=10, height=8, res=400)
fear_plot
dev.off()
# Function for standard error
#-----------------------------------------------------------------------------#
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
}
#-----------------------------------------------------------------------------#
summary <- summarySE(datAnalyse,
measurevar="avoid",
groupvars=c("Condition","Intervention_Phase"),
na.rm = T)
summary$se <- summary$sd/sqrt(summary$N)
levels(summary$Intervention_Phase)[levels(summary$Intervention_Phase)=="pre"] <- "baseline"
summary <- summary %>%
mutate(Condition=as.factor(Condition))
levels(summary$Condition)[levels(summary$Condition)==0] <- "Control group"
levels(summary$Condition)[levels(summary$Condition)==1] <- "Treatment group"
summary <- summary %>%
mutate(Condition=factor(Condition,c('Treatment group',"Control group")))
JITTER_WIDTH=0.1
COLOR_PALETTE=c('#474747','#a6a6a6')
plot_gaze <- summary %>%
ggplot(aes(x=Intervention_Phase,
y=mean,
group=Condition,
color=Condition))+
geom_point(size=2,
position=position_dodge(width=JITTER_WIDTH))+
geom_line(aes(linetype=Condition),
position=position_dodge(width=JITTER_WIDTH),
size=0.5)+
geom_errorbar(aes(ymin=mean-se, # REPLACE WITH STANDARD ERROR
ymax=mean+se, # REPLACE WITH STANDARD ERROR
linetype=Condition),
size=0.5,
width=0.1,
position=position_dodge(width=JITTER_WIDTH))+
theme_tufte()+
theme(axis.line = element_line(size = .6, color = "#444444"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
text=element_text(size = 18),
plot.title = element_text(size =18,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(t = 0, r = 20, b = 0, l = 0)))+
ylab('Gaze Avoidance')+
xlab('')+
scale_color_manual(values = COLOR_PALETTE)+
scale_y_continuous(limits = c(0.6,1))+
annotate(geom = "text",
label = '***',
x = 2.945,
y=0.88,
size=6,
hjust=-0.005)
plot_gaze
#---- Combine Plots ------------------------------------------------------------------------------------------
library(gridExtra)
plot_gaze
#### Final Plots Masterarbeit  ##########################################################################
# Version 2.0
# FM - 2020_11_08
# set system language to "en", clean workspace
Sys.setenv(LANG="en")
options("digits.secs"=6)
options(scipen = 100)
rm(list = ls())
options(stringsAsFactors = F)
#---- packages ------------------------------------------------------------------------------------------------
library(plyr)
library(nlme)
library(gtools)
library(lme4)
library(scatr)
library(jmv)
library(merTools)
library(stats)
library(car)
library(lmerTest)
library(openxlsx)
library(tidyverse)
library(ggthemes)
#---- set directories ------------------------------------------------------------------------------------------------------
maindir = '/Volumes/dcn_assist/MA/Fabian/'
#maindir = '/Volumes/dcn_assist-8/MA/Fabian/'  # for Beni
rdir =  paste0(maindir, 'output/', gsub("-", "_", Sys.Date()), "_", "xlxs")# output-directory
dir.create(rdir)
bindir = paste0(maindir,'scripts/') # scripts directory
idir =  paste0(maindir,'input/') # data-(input)directory: for input data
#---- get the Data ---------------------------------------------------------------------------------------------------------
load(paste0(idir, "datAnalyse.RData"))
#---- add Variable: Gaze Avoidance ##### CHANGED FOR MAINTAIN EYE CONTACT / NOT AVOIDANCE
datAnalyse$avoid <- 1-datAnalyse$relativeDwelltimeAOI
# Function for standard error
#-----------------------------------------------------------------------------#
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
}
#-----------------------------------------------------------------------------#
summary <- summarySE(datAnalyse,
measurevar="Angst_im_moment",
groupvars=c("Condition","Intervention_Phase"),
na.rm = T)
summary$se <- summary$sd/sqrt(summary$N)
levels(summary$Intervention_Phase)[levels(summary$Intervention_Phase)=="pre"] <- "baseline"
summary <- summary %>%
mutate(Condition=as.factor(Condition))
levels(summary$Condition)[levels(summary$Condition)==0] <- "Control group"
levels(summary$Condition)[levels(summary$Condition)==1] <- "Treatment group"
summary <- summary %>%
mutate(Condition=factor(Condition,c('Treatment group',"Control group")))
JITTER_WIDTH=0.1
COLOR_PALETTE=c('#474747','#a6a6a6')
fear_plot <-   summary %>%
ggplot(aes(x=Intervention_Phase,
y=mean,
group=Condition,
color=Condition))+
geom_point(size=2,
position=position_dodge(width=JITTER_WIDTH))+
geom_line(aes(linetype=Condition),
position=position_dodge(width=JITTER_WIDTH),
size=0.5)+
geom_errorbar(aes(ymin=mean-se, # REPLACE WITH STANDARD ERROR
ymax=mean+se, # REPLACE WITH STANDARD ERROR
linetype=Condition),
size=0.5,
width=0.1,
position=position_dodge(width=JITTER_WIDTH))+
theme_tufte()+
theme(axis.line = element_line(size = .5, color = "#444444"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
text=element_text(size = 18),
plot.title = element_text(size =18,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(t = 0, r = 20, b = 0, l = 0)))+
ylab('Fear')+
xlab('')+
scale_color_manual(values = COLOR_PALETTE)+
scale_y_continuous(limits = c(0,100)) +
annotate(geom = "text",
label = '***',
x = 2.945,
y=74,
size=6,
hjust=-0.005)
#  ggtitle('Schluber')
fear_plot
# Output
tiff('fear_plot', units="in", width=10, height=8, res=400)
fear_plot
dev.off()
# Function for standard error
#-----------------------------------------------------------------------------#
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
}
#-----------------------------------------------------------------------------#
summary <- summarySE(datAnalyse,
measurevar="avoid",
groupvars=c("Condition","Intervention_Phase"),
na.rm = T)
summary$se <- summary$sd/sqrt(summary$N)
levels(summary$Intervention_Phase)[levels(summary$Intervention_Phase)=="pre"] <- "baseline"
summary <- summary %>%
mutate(Condition=as.factor(Condition))
levels(summary$Condition)[levels(summary$Condition)==0] <- "Control group"
levels(summary$Condition)[levels(summary$Condition)==1] <- "Treatment group"
summary <- summary %>%
mutate(Condition=factor(Condition,c('Treatment group',"Control group")))
JITTER_WIDTH=0.1
COLOR_PALETTE=c('#474747','#a6a6a6')
plot_gaze <- summary %>%
ggplot(aes(x=Intervention_Phase,
y=mean,
group=Condition,
color=Condition))+
geom_point(size=2,
position=position_dodge(width=JITTER_WIDTH))+
geom_line(aes(linetype=Condition),
position=position_dodge(width=JITTER_WIDTH),
size=0.5)+
geom_errorbar(aes(ymin=mean-se, # REPLACE WITH STANDARD ERROR
ymax=mean+se, # REPLACE WITH STANDARD ERROR
linetype=Condition),
size=0.5,
width=0.1,
position=position_dodge(width=JITTER_WIDTH))+
theme_tufte()+
theme(axis.line = element_line(size = .6, color = "#444444"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
text=element_text(size = 18),
plot.title = element_text(size =18,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(t = 0, r = 20, b = 0, l = 0)))+
ylab('Gaze Avoidance')+
xlab('')+
scale_color_manual(values = COLOR_PALETTE)+
scale_y_continuous(limits = c(0.6,1))+
annotate(geom = "text",
label = '***',
x = 2.945,
y=0.88,
size=6,
hjust=-0.005)
plot_gaze
#---- Combine Plots ------------------------------------------------------------------------------------------
library(gridExtra)
library(cowplot)
grid.arrange(plot_gaze,
fear_plot,
ncol=2,
labels='Auto')
Plots <- plot_grid(fear_plot, plot_gaze, labels = "AUTO",
label_fontfamily = "Times New Roman")
# Output
tiff('plot_gaze', units="in", width=10, height=8, res=400)
plot_gaze
dev.off()
plot_gaze
#### Final Plots Masterarbeit  ##########################################################################
# Version 2.0
# FM - 2020_11_08
# set system language to "en", clean workspace
Sys.setenv(LANG="en")
options("digits.secs"=6)
options(scipen = 100)
rm(list = ls())
options(stringsAsFactors = F)
#---- packages ------------------------------------------------------------------------------------------------
library(plyr)
library(nlme)
library(gtools)
library(lme4)
library(scatr)
library(jmv)
library(merTools)
library(stats)
library(car)
library(lmerTest)
library(openxlsx)
library(tidyverse)
library(ggthemes)
#---- set directories ------------------------------------------------------------------------------------------------------
maindir = '/Volumes/dcn_assist/MA/Fabian/'
#maindir = '/Volumes/dcn_assist-8/MA/Fabian/'  # for Beni
rdir =  paste0(maindir, 'output/', gsub("-", "_", Sys.Date()), "_", "xlxs")# output-directory
dir.create(rdir)
bindir = paste0(maindir,'scripts/') # scripts directory
idir =  paste0(maindir,'input/') # data-(input)directory: for input data
#---- get the Data ---------------------------------------------------------------------------------------------------------
load(paste0(idir, "datAnalyse.RData"))
#---- add Variable: Gaze Avoidance
datAnalyse$avoid <- 1-datAnalyse$relativeDwelltimeAOI
# Function for standard error
#-----------------------------------------------------------------------------#
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
}
#-----------------------------------------------------------------------------#
summary <- summarySE(datAnalyse,
measurevar="Angst_im_moment",
groupvars=c("Condition","Intervention_Phase"),
na.rm = T)
summary$se <- summary$sd/sqrt(summary$N)
levels(summary$Intervention_Phase)[levels(summary$Intervention_Phase)=="pre"] <- "baseline"
summary <- summary %>%
mutate(Condition=as.factor(Condition))
levels(summary$Condition)[levels(summary$Condition)==0] <- "Control group"
levels(summary$Condition)[levels(summary$Condition)==1] <- "Treatment group"
summary <- summary %>%
mutate(Condition=factor(Condition,c('Treatment group',"Control group")))
JITTER_WIDTH=0.1
COLOR_PALETTE=c('#474747','#a6a6a6')
fear_plot <-   summary %>%
ggplot(aes(x=Intervention_Phase,
y=mean,
group=Condition,
color=Condition))+
geom_point(size=2,
position=position_dodge(width=JITTER_WIDTH))+
geom_line(aes(linetype=Condition),
position=position_dodge(width=JITTER_WIDTH),
size=0.5)+
geom_errorbar(aes(ymin=mean-se, # REPLACE WITH STANDARD ERROR
ymax=mean+se, # REPLACE WITH STANDARD ERROR
linetype=Condition),
size=0.5,
width=0.1,
position=position_dodge(width=JITTER_WIDTH))+
theme_tufte()+
theme(axis.line = element_line(size = .5, color = "#444444"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
text=element_text(size = 18),
plot.title = element_text(size =18,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(t = 0, r = 20, b = 0, l = 0)))+
ylab('Fear')+
xlab('')+
scale_color_manual(values = COLOR_PALETTE)+
scale_y_continuous(limits = c(0,100)) +
annotate(geom = "text",
label = '***',
x = 2.945,
y=74,
size=6,
hjust=-0.005)
#  ggtitle('Schluber')
fear_plot
# Output
tiff('fear_plot', units="in", width=10, height=8, res=400)
fear_plot
dev.off()
# Function for standard error
#-----------------------------------------------------------------------------#
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
}
#-----------------------------------------------------------------------------#
summary <- summarySE(datAnalyse,
measurevar="avoid",
groupvars=c("Condition","Intervention_Phase"),
na.rm = T)
summary$se <- summary$sd/sqrt(summary$N)
levels(summary$Intervention_Phase)[levels(summary$Intervention_Phase)=="pre"] <- "baseline"
summary <- summary %>%
mutate(Condition=as.factor(Condition))
levels(summary$Condition)[levels(summary$Condition)==0] <- "Control group"
levels(summary$Condition)[levels(summary$Condition)==1] <- "Treatment group"
summary <- summary %>%
mutate(Condition=factor(Condition,c('Treatment group',"Control group")))
JITTER_WIDTH=0.1
COLOR_PALETTE=c('#474747','#a6a6a6')
plot_gaze <- summary %>%
ggplot(aes(x=Intervention_Phase,
y=mean,
group=Condition,
color=Condition))+
geom_point(size=2,
position=position_dodge(width=JITTER_WIDTH))+
geom_line(aes(linetype=Condition),
position=position_dodge(width=JITTER_WIDTH),
size=0.5)+
geom_errorbar(aes(ymin=mean-se, # REPLACE WITH STANDARD ERROR
ymax=mean+se, # REPLACE WITH STANDARD ERROR
linetype=Condition),
size=0.5,
width=0.1,
position=position_dodge(width=JITTER_WIDTH))+
theme_tufte()+
theme(axis.line = element_line(size = .6, color = "#444444"),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
text=element_text(size = 18),
plot.title = element_text(size =18,
hjust = 0.5),
axis.title.y = element_text(vjust = 0.5,
margin = margin(t = 0, r = 20, b = 0, l = 0)))+
ylab('Gaze Avoidance')+
xlab('')+
scale_color_manual(values = COLOR_PALETTE)+
scale_y_continuous(limits = c(0.6,1))+
annotate(geom = "text",
label = '***',
x = 2.945,
y=0.88,
size=6,
hjust=-0.005)
plot_gaze
#---- Combine Plots ------------------------------------------------------------------------------------------
library(gridExtra)
library(cowplot)
grid.arrange(plot_gaze,
fear_plot,
ncol=2,
labels='Auto')
Plots <- plot_grid(fear_plot, plot_gaze, labels = "AUTO",
label_fontfamily = "Times New Roman")
# Output
tiff('plot_gaze', units="in", width=10, height=8, res=400)
plot_gaze
dev.off()
fear_plot
